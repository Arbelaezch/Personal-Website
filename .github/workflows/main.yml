name: Portfolio CI/CD Pipeline

on:
  push:
    branches: [ development, main ]
  pull_request:
    branches: [ development, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        DJANGO_ALLOWED_HOSTS: "www.christiandonovan.ca christiandonovan.ca localhost 127.0.0.1 [::1]"
        DEBUG: "1"
        SECRET_KEY: "dummy_key_for_tests"
        DEV_DB_ENGINE: "django.db.backends.sqlite3"
        DEV_DB_NAME: ":memory:"
        DEV_DB_HOST: ""  # Leave blank for sqlite
        DEV_DB_USER: ""  # Leave blank for sqlite
        DEV_DB_PASSWORD: ""  # Leave blank for sqlite
        DEV_DB_PORT: ""  #  Leave blank for sqlite
      run: |
        cd website
        python manage.py test

  deploy:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_IP || secrets.DEV_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.MEDITATIONS_PRIVATE_KEY }}
        envs: GITHUB_REF
        script: |
          set -e  # Exit on any error
          echo "Starting deployment..."
          
          # Debug information
          echo "Current user and environment:"
          whoami
          pwd
          echo "Current groups:"
          groups
          echo "Sudo permissions:"
          sudo -l || echo "Failed to list sudo permissions"
          
          echo "Testing sudo without password..."
          sudo -n true || echo "Failed to run sudo without password"
          
          # Try sudo with explicit non-interactive flag
          echo "Attempting apt-get update..."
          sudo --non-interactive apt-get update || echo "Failed to run apt-get update"
          
          # Create a temporary deployment script with verbose output
          cat << 'EOF' > /tmp/deploy.sh
          #!/bin/bash
          set -x  # Enable command tracing
          
          echo "Starting system updates..."
          export DEBIAN_FRONTEND=noninteractive
          sudo -n apt-get update
          if [ $? -ne 0 ]; then
            echo "Failed to run apt-get update"
            exit 1
          fi
          
          echo "Installing dependencies..."
          sudo -n apt-get install -y pkg-config python3-dev default-libmysqlclient-dev build-essential
          if [ $? -ne 0 ]; then
            echo "Failed to install packages"
            exit 1
          fi
          
          # Rest of your deployment script...
          EOF

            echo "Making script executable..."
            chmod +x /tmp/deploy.sh
            
            echo "Running deployment script..."
            bash -l /tmp/deploy.sh